package src;// Generated from ./MinhaGramatica.g4 by ANTLR 4.13.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class MinhaGramaticaLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		DEC=1, ALG=2, TIPO=3, RET=4, REP=5, PARA=6, AC=7, FC=8, AP=9, FP=10, CIF=11, 
		PTV=12, VAR=13, NUM=14, OP_ARIT=15, OP_RELA=16, FUN=17, WS=18;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"DEC", "ALG", "TIPO", "RET", "REP", "PARA", "AC", "FC", "AP", "FP", "CIF", 
			"PTV", "VAR", "NUM", "OP_ARIT", "OP_RELA", "FUN", "LETRA", "DIGITO", 
			"WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'DECLARACOES'", "'ALGORITMO'", null, "'retorna'", "'enquanto'", 
			"'para'", "'{'", "'}'", "'('", "')'", "'$'", "';'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "DEC", "ALG", "TIPO", "RET", "REP", "PARA", "AC", "FC", "AP", "FP", 
			"CIF", "PTV", "VAR", "NUM", "OP_ARIT", "OP_RELA", "FUN", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public MinhaGramaticaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "src/MinhaGramatica.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u0012\u00a6\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0003\u0002Q\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001"+
		"\b\u0001\t\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001"+
		"\f\u0001\f\u0005\fx\b\f\n\f\f\f{\t\f\u0001\r\u0004\r~\b\r\u000b\r\f\r"+
		"\u007f\u0001\r\u0001\r\u0004\r\u0084\b\r\u000b\r\f\r\u0085\u0003\r\u0088"+
		"\b\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0092\b\u000f\u0001\u0010\u0001"+
		"\u0010\u0005\u0010\u0096\b\u0010\n\u0010\f\u0010\u0099\t\u0010\u0001\u0011"+
		"\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0005\u0013\u00a0\b\u0013"+
		"\n\u0013\f\u0013\u00a3\t\u0013\u0001\u0013\u0001\u0013\u0000\u0000\u0014"+
		"\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006\r"+
		"\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019\r\u001b\u000e"+
		"\u001d\u000f\u001f\u0010!\u0011#\u0000%\u0000\'\u0012\u0001\u0000\u0006"+
		"\u0003\u0000*+--//\u0002\u0000<<>>\u0002\u0000AZaz\u0004\u000009AZ__a"+
		"z\u0001\u000009\u0003\u0000\t\n\r\r  \u00b0\u0000\u0001\u0001\u0000\u0000"+
		"\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000"+
		"\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000"+
		"\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000"+
		"\u000f\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000"+
		"\u0013\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000"+
		"\u0017\u0001\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000"+
		"\u001b\u0001\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000"+
		"\u001f\u0001\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000\'"+
		"\u0001\u0000\u0000\u0000\u0001)\u0001\u0000\u0000\u0000\u00035\u0001\u0000"+
		"\u0000\u0000\u0005P\u0001\u0000\u0000\u0000\u0007R\u0001\u0000\u0000\u0000"+
		"\tZ\u0001\u0000\u0000\u0000\u000bc\u0001\u0000\u0000\u0000\rh\u0001\u0000"+
		"\u0000\u0000\u000fj\u0001\u0000\u0000\u0000\u0011l\u0001\u0000\u0000\u0000"+
		"\u0013n\u0001\u0000\u0000\u0000\u0015p\u0001\u0000\u0000\u0000\u0017r"+
		"\u0001\u0000\u0000\u0000\u0019t\u0001\u0000\u0000\u0000\u001b}\u0001\u0000"+
		"\u0000\u0000\u001d\u0089\u0001\u0000\u0000\u0000\u001f\u0091\u0001\u0000"+
		"\u0000\u0000!\u0093\u0001\u0000\u0000\u0000#\u009a\u0001\u0000\u0000\u0000"+
		"%\u009c\u0001\u0000\u0000\u0000\'\u00a1\u0001\u0000\u0000\u0000)*\u0005"+
		"D\u0000\u0000*+\u0005E\u0000\u0000+,\u0005C\u0000\u0000,-\u0005L\u0000"+
		"\u0000-.\u0005A\u0000\u0000./\u0005R\u0000\u0000/0\u0005A\u0000\u0000"+
		"01\u0005C\u0000\u000012\u0005O\u0000\u000023\u0005E\u0000\u000034\u0005"+
		"S\u0000\u00004\u0002\u0001\u0000\u0000\u000056\u0005A\u0000\u000067\u0005"+
		"L\u0000\u000078\u0005G\u0000\u000089\u0005O\u0000\u00009:\u0005R\u0000"+
		"\u0000:;\u0005I\u0000\u0000;<\u0005T\u0000\u0000<=\u0005M\u0000\u0000"+
		"=>\u0005O\u0000\u0000>\u0004\u0001\u0000\u0000\u0000?@\u0005i\u0000\u0000"+
		"@A\u0005n\u0000\u0000AQ\u0005t\u0000\u0000BC\u0005r\u0000\u0000CD\u0005"+
		"e\u0000\u0000DE\u0005a\u0000\u0000EQ\u0005l\u0000\u0000FG\u0005b\u0000"+
		"\u0000GH\u0005o\u0000\u0000HI\u0005o\u0000\u0000IQ\u0005l\u0000\u0000"+
		"JK\u0005s\u0000\u0000KL\u0005t\u0000\u0000LM\u0005r\u0000\u0000MN\u0005"+
		"i\u0000\u0000NO\u0005n\u0000\u0000OQ\u0005g\u0000\u0000P?\u0001\u0000"+
		"\u0000\u0000PB\u0001\u0000\u0000\u0000PF\u0001\u0000\u0000\u0000PJ\u0001"+
		"\u0000\u0000\u0000Q\u0006\u0001\u0000\u0000\u0000RS\u0005r\u0000\u0000"+
		"ST\u0005e\u0000\u0000TU\u0005t\u0000\u0000UV\u0005o\u0000\u0000VW\u0005"+
		"r\u0000\u0000WX\u0005n\u0000\u0000XY\u0005a\u0000\u0000Y\b\u0001\u0000"+
		"\u0000\u0000Z[\u0005e\u0000\u0000[\\\u0005n\u0000\u0000\\]\u0005q\u0000"+
		"\u0000]^\u0005u\u0000\u0000^_\u0005a\u0000\u0000_`\u0005n\u0000\u0000"+
		"`a\u0005t\u0000\u0000ab\u0005o\u0000\u0000b\n\u0001\u0000\u0000\u0000"+
		"cd\u0005p\u0000\u0000de\u0005a\u0000\u0000ef\u0005r\u0000\u0000fg\u0005"+
		"a\u0000\u0000g\f\u0001\u0000\u0000\u0000hi\u0005{\u0000\u0000i\u000e\u0001"+
		"\u0000\u0000\u0000jk\u0005}\u0000\u0000k\u0010\u0001\u0000\u0000\u0000"+
		"lm\u0005(\u0000\u0000m\u0012\u0001\u0000\u0000\u0000no\u0005)\u0000\u0000"+
		"o\u0014\u0001\u0000\u0000\u0000pq\u0005$\u0000\u0000q\u0016\u0001\u0000"+
		"\u0000\u0000rs\u0005;\u0000\u0000s\u0018\u0001\u0000\u0000\u0000ty\u0003"+
		"\u0015\n\u0000ux\u0003#\u0011\u0000vx\u0003%\u0012\u0000wu\u0001\u0000"+
		"\u0000\u0000wv\u0001\u0000\u0000\u0000x{\u0001\u0000\u0000\u0000yw\u0001"+
		"\u0000\u0000\u0000yz\u0001\u0000\u0000\u0000z\u001a\u0001\u0000\u0000"+
		"\u0000{y\u0001\u0000\u0000\u0000|~\u0003%\u0012\u0000}|\u0001\u0000\u0000"+
		"\u0000~\u007f\u0001\u0000\u0000\u0000\u007f}\u0001\u0000\u0000\u0000\u007f"+
		"\u0080\u0001\u0000\u0000\u0000\u0080\u0087\u0001\u0000\u0000\u0000\u0081"+
		"\u0083\u0005.\u0000\u0000\u0082\u0084\u0003%\u0012\u0000\u0083\u0082\u0001"+
		"\u0000\u0000\u0000\u0084\u0085\u0001\u0000\u0000\u0000\u0085\u0083\u0001"+
		"\u0000\u0000\u0000\u0085\u0086\u0001\u0000\u0000\u0000\u0086\u0088\u0001"+
		"\u0000\u0000\u0000\u0087\u0081\u0001\u0000\u0000\u0000\u0087\u0088\u0001"+
		"\u0000\u0000\u0000\u0088\u001c\u0001\u0000\u0000\u0000\u0089\u008a\u0007"+
		"\u0000\u0000\u0000\u008a\u001e\u0001\u0000\u0000\u0000\u008b\u0092\u0007"+
		"\u0001\u0000\u0000\u008c\u008d\u0005<\u0000\u0000\u008d\u0092\u0005=\u0000"+
		"\u0000\u008e\u008f\u0005>\u0000\u0000\u008f\u0092\u0005=\u0000\u0000\u0090"+
		"\u0092\u0005=\u0000\u0000\u0091\u008b\u0001\u0000\u0000\u0000\u0091\u008c"+
		"\u0001\u0000\u0000\u0000\u0091\u008e\u0001\u0000\u0000\u0000\u0091\u0090"+
		"\u0001\u0000\u0000\u0000\u0092 \u0001\u0000\u0000\u0000\u0093\u0097\u0007"+
		"\u0002\u0000\u0000\u0094\u0096\u0007\u0003\u0000\u0000\u0095\u0094\u0001"+
		"\u0000\u0000\u0000\u0096\u0099\u0001\u0000\u0000\u0000\u0097\u0095\u0001"+
		"\u0000\u0000\u0000\u0097\u0098\u0001\u0000\u0000\u0000\u0098\"\u0001\u0000"+
		"\u0000\u0000\u0099\u0097\u0001\u0000\u0000\u0000\u009a\u009b\u0007\u0002"+
		"\u0000\u0000\u009b$\u0001\u0000\u0000\u0000\u009c\u009d\u0007\u0004\u0000"+
		"\u0000\u009d&\u0001\u0000\u0000\u0000\u009e\u00a0\u0007\u0005\u0000\u0000"+
		"\u009f\u009e\u0001\u0000\u0000\u0000\u00a0\u00a3\u0001\u0000\u0000\u0000"+
		"\u00a1\u009f\u0001\u0000\u0000\u0000\u00a1\u00a2\u0001\u0000\u0000\u0000"+
		"\u00a2\u00a4\u0001\u0000\u0000\u0000\u00a3\u00a1\u0001\u0000\u0000\u0000"+
		"\u00a4\u00a5\u0006\u0013\u0000\u0000\u00a5(\u0001\u0000\u0000\u0000\n"+
		"\u0000Pwy\u007f\u0085\u0087\u0091\u0097\u00a1\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}